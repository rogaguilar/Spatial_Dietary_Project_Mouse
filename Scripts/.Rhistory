#Load packages and CSVs
packages <- c("tidyverse","patchwork", "enrichR","org.Mm.eg.db")
lapply(packages,library, character.only=TRUE)
#Load in Samples markers csv file
markers <- read_csv(file = "/Volumes/workl/Rogelio/Data_Analysis/Marker_CSV/F07833_5_RT_all_markers.csv") %>%
mutate(gene = gsub(pattern = "\\.m0$",replacement = "", x = `gene`))
clusters <- unique(markers$cluster)
View(markers)
clusters
#Filter csv for genes with log fold change over 1
top10 <- markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
slice_head(n = 10) %>%
ungroup() %>% filter(cluster==1)
#Select cluster of interest
clust0.markers <- markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
ungroup() %>%
filter(cluster==0)
# Convert Gene Symbols to Entrez IDs for KEGG analysis
entrez_ids <- mapIds(org.Mm.eg.db,
keys = clust0.markers$gene,
column = "ENTREZID",
keytype = "SYMBOL",
multiVals = "first")
#Apply enrichment through accessing enrichR API
enriched <- enrichR::enrichr(genes = clust0.markers$gene,
databases = c("Azimuth_Cell_Types_2021", "Tabula_Muris"))
#Plot enrichment
plotEnrich(enriched[["Tabula_Muris"]], showTerms = 20, numChar = 40,
y = "Count", orderBy = "P.value")
View(listEnrichrDbs())
dim(listEnrichrDbs())
#Apply enrichment through accessing enrichR API
enriched <- enrichR::enrichr(genes = clust0.markers$gene,
databases = c("Azimuth_Cell_Types_2021", "Tabula_Muris", "Cancer_Cell_Line_Encyclopedia"))
#Plot enrichment for the top 20 terms ordered by p-value
plotEnrich(enriched[["Cancer_Cell_Line_Encyclopedia"]], showTerms = 20, numChar = 40,
y = "Count", orderBy = "P.value")
lapply(unique(markers$cluster),function(cluster) {
cluster.markers <- markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
ungroup() %>%
filter(cluster==cluster)
#Apply enrichment through accessing enrichR API
enriched <- enrichR::enrichr(genes = cluster.markers$gene,
databases = "Cancer_Cell_Line_Encyclopedia")
#Plot enrichment for the top 20 terms ordered by p-value
plotEnrich(enriched[["Cancer_Cell_Line_Encyclopedia"]], showTerms = 20, numChar = 40,
y = "Count", orderBy = "P.value")
}) %>% wrap_plots(.)
#Plot enrichment for the top 20 terms ordered by p-value
plot <- plotEnrich(enriched[["Cancer_Cell_Line_Encyclopedia"]], showTerms = 20, numChar = 40,
y = "Count", orderBy = "P.value")
class(plot)
plot + theme(title = "test")
plot + ggtitle(label = "test")
lapply(unique(markers$cluster),function(cluster) {
cluster.markers <- markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
ungroup() %>%
filter(cluster==cluster)
#Apply enrichment through accessing enrichR API
enriched <- enrichR::enrichr(genes = cluster.markers$gene,
databases = "Cancer_Cell_Line_Encyclopedia")
#Plot enrichment for the top 20 terms ordered by p-value
plot <- plotEnrich(enriched[["Cancer_Cell_Line_Encyclopedia"]], showTerms = 20, numChar = 40,
y = "Count", orderBy = "P.value") +
ggtitle(label = paste("Cancer_Cell_Line_Encyclopedia enrichment for cluster", cluster, sep = " "))
return(plot)
}) %>% wrap_plots(.)
lapply(unique(markers$cluster),function(cluster) {
cluster.markers <- markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
ungroup() %>%
filter(cluster==cluster)
#Apply enrichment through accessing enrichR API
enriched <- enrichR::enrichr(genes = cluster.markers$gene,
databases = "Cancer_Cell_Line_Encyclopedia")
#Plot enrichment for the top 20 terms ordered by p-value
plot <- plotEnrich(enriched[["KEGG_2019_Mouse"]], showTerms = 20, numChar = 40,
y = "Count", orderBy = "P.value") +
ggtitle(label = paste("KEGG_2019_Mouse enrichment for cluster", cluster, sep = " "))
return(plot)
}) %>% wrap_plots(.)
lapply(unique(markers$cluster),function(cluster) {
cluster.markers <- markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
ungroup() %>%
filter(cluster==cluster)
#Apply enrichment through accessing enrichR API
enriched <- enrichR::enrichr(genes = cluster.markers$gene,
databases = "KEGG_2019_Mouse")
#Plot enrichment for the top 20 terms ordered by p-value
plot <- plotEnrich(enriched[["KEGG_2019_Mouse"]], showTerms = 20, numChar = 40,
y = "Count", orderBy = "P.value") +
ggtitle(label = paste("KEGG_2019_Mouse enrichment for cluster", cluster, sep = " "))
return(plot)
}) %>% wrap_plots(.)
lapply(unique(markers$cluster),function(cluster) {
cluster.markers <- markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
ungroup() %>%
filter(cluster==cluster)
#Apply enrichment through accessing enrichR API
enriched <- enrichR::enrichr(genes = cluster.markers$gene,
databases = "KEGG_2019_Mouse")
#Plot enrichment for the top 20 terms ordered by p-value
plot <- plotEnrich(enriched[["KEGG_2019_Mouse"]], showTerms = 20, numChar = 40,
y = "Count", orderBy = "P.value") +
ggtitle(label = paste("KEGG_2019_Mouse enrichment for cluster", cluster, sep = " "))
return(head(cluster.markers))
})
lapply(unique(markers$cluster),function(cluster) {
cluster.markers <- markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
ungroup() %>%
filter(cluster==cluster)
return(head(cluster.markers))
})
return(print(cluster))
lapply(unique(markers$cluster),function(cluster) {
cluster.markers <- markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
ungroup() %>%
filter(cluster==cluster)
return(print(cluster))
})
markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
ungroup() %>%
filter(cluster==0) %>% View(.)
markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
ungroup() %>%
filter(cluster==1) %>% View(.)
vapply(unique(markers$cluster),function(cluster) {
cluster.markers <- markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
ungroup() %>%
filter(cluster==cluster)
return(print(cluster))
})
unique(markers$cluster)
clusters <- unique(markers$cluster)
?head
